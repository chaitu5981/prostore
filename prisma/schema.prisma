// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// generator accelerate {
//   provider = "prisma-accelerate"
//   output   = "../generated/prisma/edge"
// }

// generator edge {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma/edge"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  brand       String
  category    String
  description String
  images      String[]
  stock       Int      @default(0)
  price       Decimal  @default(0) @db.Decimal(10, 2)
  rating      Decimal  @default(0) @db.Decimal(4, 2)
  numReviews  Int      @default(0)
  banner      String?
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique(map: "user-email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @unique @db.Uuid
  cartSessionId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(6, 2)
  totalPrice    Decimal  @db.Decimal(6, 2)
  shippingPrice Decimal  @db.Decimal(6, 2)
  taxPrice      Decimal  @db.Decimal(6, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
